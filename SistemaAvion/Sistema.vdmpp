class Sistema
types
    public String = seq of char;
    public SensorEstado = <Normal> | <Advertencia> | <Alerta>;
instance variables
    public allSensors: set of Sensor;
    public alarma: Alerta := new Alerta(false, "");
    public mediciones: map Sensor`parametro to real;
    public AoACritico: real := 12;
    public estadosSensores: seq of SensorEstado := [];

operations
    public Sistema: set of Sensor ==> Sistema 
    Sistema(s)==(
        allSensors := s;
    );

    public verificarMediciones: () ==> ()
    verificarMediciones()==(
        estadosSensores := [];

        for all s in set allSensors do
            mediciones := s.getMediciones();

            if mediciones(<Flaps>) = 0 then 
                AoACritico := 15
            elseif mediciones(<VelocidadAire>) < 200 then
                AoACritico := 14;

            if mediciones(<AoA>) >= AoACritico then 
                estadosSensores := estadosSensores ^ [<Alerta>]
            elseif mediciones(<AoA>) >= AoACritico - 2 then -- Podr√≠a usarse como umbral de advertencia
                estadosSensores := estadosSensores ^ [<Advertencia>]
            else
                estadosSensores := estadosSensores ^ [<Normal>];

        -- Determinar el valor "prevalente"
        estadosSensores := sortByCount(estadosSensores);
    );

    -- Retorna secuencia de estados ordenador empezando por el que mas se repite
    private sortByCount: seq of SensorEstado ==> seq of SensorEstado
    sortByCount(estados) ==
        return estados ++ []
        post forall e in set estados & count(e, estados) >= count(e, RESULT);

    public getEstado: () ==> bool
    getEstado()==(
       return alarma.getEstado();
    );
end Sistema
